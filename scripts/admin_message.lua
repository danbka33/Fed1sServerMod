---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by danila.
--- DateTime: 21.04.2023 13:56
---

local AdminMessage = {
    show_message_on_center = "server_mod_admin_message_on_center",
    name_overhead_admin_text = "fed1s_admin_text",
}

function AdminMessage.on_init()
    global.adminTexts = {}

    -- In case mod is being added mid-game
    for _, player in pairs(game.players) do
        AdminMessage.update_overhead_texts(player)
    end
end

function AdminMessage.get_make_admin_texts()
    if not global.adminTexts then
        global.adminTexts = {}
    end

    return global.adminTexts
end

function AdminMessage.on_configuration_changed()
    for _, player in pairs(game.players) do
        AdminMessage.update_overhead_texts(player)
    end
end

function AdminMessage.on_player_created(event)
    AdminMessage.update_overhead_texts(game.get_player(event.player_index)) --[[@as LuaPlayer]]
end

function AdminMessage.on_nth_tick_60(event)
    if AdminMessage.get_make_admin_texts() then
        for key, value in pairs(AdminMessage.get_make_admin_texts()) do
            if event.tick > (value.tick + 60 * 15) then
                AdminMessage.get_make_admin_texts()[key] = nil

                for _, player in pairs(game.players) do
                    AdminMessage.update_overhead_texts(player)
                end
            end
        end
    end
end

function AdminMessage.on_console_chat(event)
    if event.player_index then
        local player = game.players[event.player_index]
        local playerData = ServerMod.get_make_playerdata(event.player_index)
    end

    if player and playerData and playerData.role then

        local sendAdmin = player.permission_group.name == "Admin";
        local sendManager = player.permission_group.name == "Manager";
        local sendPlayerName = player.name;
        local sendRole = playerData.role;

        if ((sendAdmin or sendManager) and string.find(event.message, "!") or player.name == "fed1s") then
            table.insert(AdminMessage.get_make_admin_texts(), {
                message = player.name .. ": " .. event.message,
                tick = event.tick,
                role = sendRole,
                manager = sendManager,
                admin = sendAdmin,
                playerName = player.name
            })

            for _, player in pairs(game.players) do
                local isAdmin = player.permission_group.name == "Admin"
                local isManager = player.permission_group.name == "Manager"
                local currentPlayerData = ServerMod.get_make_playerdata(player.index)
                local playerRole = currentPlayerData.role

                if not (sendPlayerName == player.name) and (isAdmin) and ((sendAdmin) or (sendManager and isManager) or (sendManager and sendRole == playerRole)) then
                    player.play_sound({ path = "admin_notify" })
                end

                AdminMessage.update_overhead_texts(player)
            end

        end
    end
end

function AdminMessage.update_overhead_texts(player)
    local gui = player.gui.center

    local playerData = ServerMod.get_make_playerdata(player.index)

    local adminText = gui[AdminMessage.name_overhead_admin_text]

    if not player.mod_settings[AdminMessage.show_message_on_center].value then
        if adminText then
            adminText.destroy()
        end
        return
    end

    if gui and playerData and playerData.role then
        local isManager = player.permission_group.name == "Manager"
        local isAdmin = player.permission_group.name == "Admin"
        local playerRole = playerData.role

        if not adminText then
            gui.add {
                type = "flow",
                direction = "vertical",
                name = AdminMessage.name_overhead_admin_text
            }
            adminText = gui[AdminMessage.name_overhead_admin_text]
            adminText.style.top_margin = 200;
            adminText.ignored_by_interaction = true
        end

        for _, name in pairs(adminText.children_names) do
            adminText[name].destroy()
        end

        for key, message in pairs(AdminMessage.get_make_admin_texts()) do
            if not (player.name == message.playerName) and ((isAdmin) or (message.admin) or (message.manager and isManager) or (message.manager and message.role == playerRole)) then
                local adminTextKey = AdminMessage.name_overhead_admin_text .. "_" .. key
                adminText.add {
                    type = "label",
                    name = adminTextKey,
                    caption = { "Fed1sServerMod.admin_text", "[img=utility.notification] " .. message.message .. " [img=utility.notification]" }
                }
                adminText[adminTextKey].style.font = "adminFont"
                adminText[adminTextKey].style.single_line = false

                local textColor = { r = 1, g = 1, b = 0 }
                if (message.manager) then
                    textColor = { r = 0, g = 1, b = 0 }
                end
                adminText[adminTextKey].style.font_color = textColor
            end
        end

    end
end

function AdminMessage.on_runtime_mod_setting_changed(event)
    if event.player_index and event.setting == AdminMessage.show_message_on_center then
        AdminMessage.update_overhead_texts(game.get_player(event.player_index) --[[@as LuaPlayer]])
    end
end

local event_handlers = {}
event_handlers.on_init = AdminMessage.on_init
event_handlers.on_nth_tick = {}
event_handlers.on_nth_tick[60] = AdminMessage.on_nth_tick_60
event_handlers.on_configuration_changed =  AdminMessage.on_configuration_changed
event_handlers.events = {
    [defines.events.on_console_chat] = AdminMessage.on_console_chat,
    [defines.events.on_runtime_mod_setting_changed] = AdminMessage.on_runtime_mod_setting_changed
}
EventHandler.add_lib(event_handlers)

return AdminMessage